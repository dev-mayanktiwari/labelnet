// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  adminId       String   @id @default(cuid())
  walletAddress String   @unique
  createdAt     DateTime @default(now())
  tasks         Task[]

  @@map("admin")
}

model Task {
  taskId             Int             @id @default(autoincrement())
  title              String
  description        String          @default("")
  filledParticipants Int             @default(0)
  maxParticipants    Int             @default(10)
  totalReward        Float           @default(0.0)
  trasactionHash     String
  adminId            String
  admin              Admin           @relation(fields: [adminId], references: [adminId])
  averageTime        Float?           @default(0)
  options            Option[] // Renamed to Option (singular)
  submissions        Submission[]
  createdAt          DateTime        @default(now())
  isActive           Boolean         @default(true)
  timeAnalytics      TimeAnalytics[]

  @@map("task")
}

model User {
  userId        String          @id @default(cuid())
  walletAddress String          @unique
  submissions   Submission[]
  createdAt     DateTime        @default(now())
  pendingAmount Float           @default(0.0)
  lockedAmount  Float           @default(0.0)
  payout        Payout[]
  timeAnalytics TimeAnalytics[]

  @@map("user")
}

model TimeAnalytics {
  id        Int      @id @default(autoincrement())
  timeTaken Int
  userId    String
  user      User     @relation(fields: [userId], references: [userId])
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [taskId])
  createdAt DateTime @default(now())

  @@unique([userId, taskId])
  @@map("time_analytics")
}

model Option {
  id          Int          @id @default(autoincrement())
  url         String
  taskId      Int
  task        Task         @relation(fields: [taskId], references: [taskId])
  submissions Submission[]

  @@map("option")
}

model Payout {
  payoutId               Int       @id @default(autoincrement())
  userId                 String
  user                   User      @relation(fields: [userId], references: [userId])
  amount                 Float
  transactionHash        String?
  blockChainConfirmation Boolean   @default(false)
  retryCount             Int       @default(0)
  failureReason          String?
  processedAt            DateTime?
  status                 TxnStatus @default(PENDING)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@map("payout")
}

model Submission {
  submissionId Int      @id @default(autoincrement())
  userId       String
  user         User     @relation(fields: [userId], references: [userId])
  taskId       Int
  task         Task     @relation(fields: [taskId], references: [taskId])
  optionId     Int
  option       Option   @relation(fields: [optionId], references: [id])
  submittedAt  DateTime @default(now())

  @@unique([userId, taskId])
  @@map("submission")
}

enum TxnStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
}
